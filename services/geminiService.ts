import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { TeamId } from '../types';
import { FileAttachment } from './store';

const API_KEY = process.env.API_KEY || "YOUR_API_KEY_HERE"; 

if (API_KEY === "YOUR_API_KEY_HERE" && process.env.NODE_ENV !== "test") {
  console.warn(
    "Gemini API key is not configured. Please set the API_KEY environment variable. Mock responses will be used."
  );
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

export const GeminiService = () => {
  const processRequest = async (prompt: string, teamId: TeamId, attachments: FileAttachment[] = []): Promise<string> => {
    if (API_KEY === "YOUR_API_KEY_HERE") {
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));
      const attachmentInfo = attachments.length > 0 
        ? `\nAttachments: ${attachments.map(a => a.name).join(', ')}`
        : '';
      return `Mock response for Team ${teamId}: The prompt was "${prompt.substring(0,50)}...".${attachmentInfo} AI models for this team have processed the request.`;
    }

    try {
      const systemInstruction = `You are a specialized AI assistant for DEV TEAM - Team ${teamId}. This team consists of 6 AI models focusing on advanced technical problem-solving. Provide a concise, expert-level response.`;
      
      let fullPrompt = prompt;
      if (attachments.length > 0) {
        fullPrompt += `\n\nAttached files:\n${attachments.map(a => `- ${a.name || 'Unnamed file'} (${a.status})`).join('\n')}`;
      }

      const response: GenerateContentResponse = await ai.models.generateContent({
        model: "gemini-2.5-flash-preview-04-17",
        contents: fullPrompt,
        config: {
          systemInstruction: systemInstruction,
        }
      });
      
      return response.text || 'No response generated';

    } catch (error: any) {
      console.error(`Error calling Gemini API for Team ${teamId}:`, error);
      let errorMessage = `Team ${teamId} - AI processing failed.`;
      if (error.message) {
        errorMessage += ` Details: ${error.message}`;
      }
      if (error.toString().includes("API key not valid")) {
        errorMessage = "Error: The configured API key is not valid. Please check your API_KEY environment variable.";
      } else if (error.status === 429) {
        errorMessage = `Team ${teamId} - AI processing failed due to rate limits. Please try again later.`;
      }
      return `Error processing for Team ${teamId}: ${error.message || 'Unknown error'}`;
    }
  };

  const generateSummary = async (originalPrompt: string, responsesText: string): Promise<string> => {
    if (API_KEY === "YOUR_API_KEY_HERE") {
      await new Promise(resolve => setTimeout(resolve, 500));
      return "Mock summary: All team responses have been collated and summarized effectively, highlighting key insights and agreements based on the original prompt: \"" + originalPrompt.substring(0, 50) + "...\"";
    }

    const summaryPrompt = `Original Prompt: "${originalPrompt}"\n\nBased on this prompt, the following responses were generated by different AI teams:\n\n${responsesText}\n\nPlease synthesize these responses into a single, concise summary. Highlight key insights, agreements, or notable discrepancies if any. The summary should be neutral and reflect the collective information provided by the teams.`;

    try {
      const response: GenerateContentResponse = await ai.models.generateContent({
        model: "gemini-2.5-flash-preview-04-17",
        contents: summaryPrompt,
        config: {
          systemInstruction: "You are an expert AI response aggregator and summarizer. Your task is to provide a neutral, concise summary of multiple AI-generated texts related to an original prompt.",
        }
      });
      return response.text || 'No summary generated';
    } catch (error: any) {
      console.error(`Error calling Gemini API for summarization:`, error);
      let errorMessage = "AI summarization failed.";
      if (error.message) {
        errorMessage += ` Details: ${error.message}`;
      }
      if (error.toString().includes("API key not valid")) {
        errorMessage = "Error: The API key for summarization is not valid.";
      }
      throw new Error(errorMessage);
    }
  };

  return {
    processRequest,
    generateSummary,
  };
};
